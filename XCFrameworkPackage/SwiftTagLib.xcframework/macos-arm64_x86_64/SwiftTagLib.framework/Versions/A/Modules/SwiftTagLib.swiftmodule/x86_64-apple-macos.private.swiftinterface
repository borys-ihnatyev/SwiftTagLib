// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1.2 effective-5.10 (swiftlang-6.1.2.1.2 clang-1700.0.13.5)
// swift-module-flags: -target x86_64-apple-macos13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name SwiftTagLib
// swift-module-flags-ignorable: -no-verify-emitted-module-interface -interface-compiler-version 6.1.2
import Foundation/*.Data*/
import Foundation/*.FileHandle*/
import Foundation/*.LocalizedError*/
import Foundation/*.TimeInterval*/
import Foundation/*.URL*/
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
extension SwiftTagLib.AudioFile.Metadata {
  public struct AdditionalMetadataPair : Swift.Hashable {
    public let key: Swift.String
    public let value: Swift.String
    public init(key: Swift.String, value: Swift.String)
    public static func == (a: SwiftTagLib.AudioFile.Metadata.AdditionalMetadataPair, b: SwiftTagLib.AudioFile.Metadata.AdditionalMetadataPair) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension SwiftTagLib.AudioFile.Metadata {
  public struct AttachedPicture : Swift.Hashable, Swift.Equatable {
    public let data: Foundation.Data
    public let description: Swift.String
    public let kind: SwiftTagLib.AudioFile.Metadata.AttachedPicture.Kind
    public init(data: Foundation.Data, kind: SwiftTagLib.AudioFile.Metadata.AttachedPicture.Kind, description: Swift.String)
    public static func == (a: SwiftTagLib.AudioFile.Metadata.AttachedPicture, b: SwiftTagLib.AudioFile.Metadata.AttachedPicture) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension SwiftTagLib.AudioFile.Metadata.AttachedPicture {
  public enum Kind : Swift.UInt32, Swift.RawRepresentable, Swift.CustomStringConvertible {
    case other
    case fileIcon
    case otherFileIcon
    case frontCover
    case backCover
    case leafletPage
    case media
    case leadArtist
    case artist
    case conductor
    case band
    case composer
    case lyricist
    case recordingLocation
    case duringRecording
    case duringPerformance
    case movieScreenCapture
    case colouredFish
    case illustration
    case bandLogo
    case publisherLogo
    public var description: Swift.String {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias RawValue = Swift.UInt32
    public var rawValue: Swift.UInt32 {
      get
    }
  }
}
public struct AudioFile {
  public let url: Foundation.URL
  public let format: SwiftTagLib.AudioFile.Format
  public var metadata: SwiftTagLib.AudioFile.Metadata
  public let properties: SwiftTagLib.AudioFile.Properties
  public init(url: Foundation.URL, options: SwiftTagLib.AudioFile.Metadata.ReadingOptions = [], overlayStrategy: SwiftTagLib.AudioFile.Metadata.OverlayStrategy = .override) throws(SwiftTagLib.AudioFile.InitializationError)
  public func write() throws(SwiftTagLib.AudioFile.MetadataWritingError)
}
extension SwiftTagLib.AudioFile {
  public struct CxxException {
    public enum Kind : Swift.String {
      case runtimeError
      case exception
      case unknown
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public let kind: SwiftTagLib.AudioFile.CxxException.Kind
    public let message: Swift.String?
  }
  public enum InitializationError : Swift.Error, Foundation.LocalizedError {
    case unableToDetermineAudioFormat
    case unableToOpenFile
    case invalidFile
    case exception(SwiftTagLib.AudioFile.CxxException)
    case unknown
    public var errorDescription: Swift.String? {
      get
    }
  }
  public enum MetadataWritingError : Swift.Error, Foundation.LocalizedError {
    case unableToOpenFile
    case invalidFile
    case saveError
    case exception(SwiftTagLib.AudioFile.CxxException)
    case unknown
    public var errorDescription: Swift.String? {
      get
    }
  }
}
extension SwiftTagLib.AudioFile {
  public enum Format : Swift.CaseIterable {
    case aiff
    case dsdiff
    case dsf
    case flac
    case monkeysAudio
    case mp3
    case mp4
    case musepack
    case oggFlac
    case oggOpus
    case oggSpeex
    case oggVorbix
    case trueAudio
    case wave
    case wavPack
    public static func == (a: SwiftTagLib.AudioFile.Format, b: SwiftTagLib.AudioFile.Format) -> Swift.Bool
    public typealias AllCases = [SwiftTagLib.AudioFile.Format]
    nonisolated public static var allCases: [SwiftTagLib.AudioFile.Format] {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension SwiftTagLib.AudioFile {
  public struct Metadata : Swift.Hashable {
    public var title: Swift.String?
    public var albumTitle: Swift.String?
    public var artist: Swift.String?
    public var genre: Swift.String?
    public var releaseDate: Swift.String?
    public var comment: Swift.String?
    public var composer: Swift.String?
    public var albumArtist: Swift.String?
    public var beatPerMinute: Swift.Int32?
    public var rating: Swift.Int32?
    public var trackNumber: Swift.Int32?
    public var trackTotal: Swift.Int32?
    public var discNumber: Swift.Int32?
    public var discTotal: Swift.Int32?
    public var lyrics: Swift.String?
    public var compilation: Swift.Bool?
    public var internationalStandardRecordingCode: Swift.String?
    public var mediaCatalogNumber: Swift.String?
    public var musicBrainzReleaseID: Swift.String?
    public var musicBrainzRecordingID: Swift.String?
    public var attachedPictures: [SwiftTagLib.AudioFile.Metadata.AttachedPicture]
    public var hasAttachedPictures: Swift.Bool {
      get
    }
    public var additional: [SwiftTagLib.AudioFile.Metadata.AdditionalMetadataPair]
    public var tagSource: SwiftTagLib.AudioFile.Metadata.TagSource {
      get
    }
    public init()
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: SwiftTagLib.AudioFile.Metadata, b: SwiftTagLib.AudioFile.Metadata) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension SwiftTagLib.AudioFile.Metadata {
  public enum OverlayStrategy : Swift.UInt8, Swift.RawRepresentable, Swift.CustomStringConvertible {
    case graceful
    case override
    case regardless
    public var description: Swift.String {
      get
    }
    public init?(rawValue: Swift.UInt8)
    public typealias RawValue = Swift.UInt8
    public var rawValue: Swift.UInt8 {
      get
    }
  }
}
extension SwiftTagLib.AudioFile {
  public struct Properties : Swift.Hashable {
    public var lengthInSeconds: Swift.Int32 {
      get
    }
    public var channels: Swift.Int32 {
      get
    }
    public var sampleRate: Swift.Int32 {
      get
    }
    public var bitrate: Swift.Int32 {
      get
    }
    public var duration: Foundation.TimeInterval {
      get
    }
    public static func == (a: SwiftTagLib.AudioFile.Properties, b: SwiftTagLib.AudioFile.Properties) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension SwiftTagLib.AudioFile.Metadata {
  public struct ReadingOptions : Swift.OptionSet, Swift.Hashable, Swift.Equatable, Swift.CustomStringConvertible {
    public static var skipPictures: SwiftTagLib.AudioFile.Metadata.ReadingOptions {
      get
    }
    public let rawValue: Swift.UInt32
    public init(rawValue: Swift.UInt32)
    public var description: Swift.String {
      get
    }
    public typealias ArrayLiteralElement = SwiftTagLib.AudioFile.Metadata.ReadingOptions
    public typealias Element = SwiftTagLib.AudioFile.Metadata.ReadingOptions
    public typealias RawValue = Swift.UInt32
  }
}
extension SwiftTagLib.AudioFile.Metadata {
  public struct TagSource : Swift.OptionSet, Swift.Hashable, Swift.Equatable, Swift.CustomStringConvertible {
    public static var abstract: SwiftTagLib.AudioFile.Metadata.TagSource {
      get
    }
    public static var id3v1: SwiftTagLib.AudioFile.Metadata.TagSource {
      get
    }
    public static var id3v2: SwiftTagLib.AudioFile.Metadata.TagSource {
      get
    }
    public static var mp4: SwiftTagLib.AudioFile.Metadata.TagSource {
      get
    }
    public static var ape: SwiftTagLib.AudioFile.Metadata.TagSource {
      get
    }
    public static var xiph: SwiftTagLib.AudioFile.Metadata.TagSource {
      get
    }
    public let rawValue: Swift.UInt8
    public init(rawValue: Swift.UInt8)
    public var description: Swift.String {
      get
    }
    public typealias ArrayLiteralElement = SwiftTagLib.AudioFile.Metadata.TagSource
    public typealias Element = SwiftTagLib.AudioFile.Metadata.TagSource
    public typealias RawValue = Swift.UInt8
  }
}
extension SwiftTagLib.AudioFile.Metadata.AttachedPicture.Kind : Swift.Equatable {}
extension SwiftTagLib.AudioFile.Metadata.AttachedPicture.Kind : Swift.Hashable {}
extension SwiftTagLib.AudioFile.CxxException.Kind : Swift.Equatable {}
extension SwiftTagLib.AudioFile.CxxException.Kind : Swift.Hashable {}
extension SwiftTagLib.AudioFile.CxxException.Kind : Swift.RawRepresentable {}
extension SwiftTagLib.AudioFile.Format : Swift.Equatable {}
extension SwiftTagLib.AudioFile.Format : Swift.Hashable {}
extension SwiftTagLib.AudioFile.Metadata.OverlayStrategy : Swift.Equatable {}
extension SwiftTagLib.AudioFile.Metadata.OverlayStrategy : Swift.Hashable {}
